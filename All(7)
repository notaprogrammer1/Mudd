import threading
import time
import sys

# """``````````fffffff
# ````````ffffff1ff
# ``````ffffffff|ff
# `````fff5-4-3-2ff
# ````ffff|fffff|ff
# ```fff7-6-8-9-10f
# ``ffff|fffff|ffff
# ``ffff14-13-12-11
# ``fffffffffffffff
#
#  * = You, f = Forest, ` = Water"""


class NPC(object):
    def __init__(self,vname,health,damage,description, xp, hostile, dead, speed,loot):
        self.vname = vname
        self.health = health
        self.damage = damage
        self.description = description
        self.xp = xp
        self.hostile = hostile
        self.dead = dead
        self.speed = speed
        self.loot = loot


class Weapon(object):
    def __init__(self,vname,damage,speed,rarity,value,weight):
        self.vname = vname
        self.damage = damage
        self.speed = speed
        self.rarity = rarity
        self.value = value
        self.weight = weight


class Spoils(object):
    def __init__(self,vname,value,weight):
        self.vname = vname
        self.value = value
        self.weight = weight




ssword = Weapon("Steel Sword",4,0,"Common",10,9)
sdag = Weapon("A small dagger",3,1,"Common",7,6)
stick = Weapon("A small sharp stick",2,0,"Common",0,10)
killstick = Weapon("Huge stick for testing",15,0,"common",0,0)

ccrown = Spoils("A Diamond and ruby encrusted crown",50,20)

rat1 = NPC("Young Rat",5,1,"A hissing juvenile rat with matted fur",20, False,False,4,[])
rat2 = NPC("Adult Rat", 9,3,"A fully grown adult rat",30,False,False,4,[ssword])
rat3 = NPC("Rat Matriarch", 14,10,"A huge rat matriarch wearing a golden, jeweled crown",50,True,False,3,[ccrown])
rat5 = NPC("Young Rat",5,1,"A hissing juvenile rat with matted fur",20, False,False,4,[])
rat6 = NPC("Adult Rat", 9,3,"A fully grown adult rat",30,False,False,4,[ssword])

loc = 'beg1'
inv = [stick]
vinv = []

#Experience
playerLevel = 1
currentExp = 0
levelNext = 25
skillPoints = 0



#Class Category
knight = 0
mage = 0



balance = 3
wielded = []
maxHealth = 50
playerHealth = 50
incap = False


locations = {
    "beg1": {
        "description": "You are at the northernmost point in a shaded forest.",
        "exits": {"S": "beg2"},
        "interact": {},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff*ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg2": {
        "description": "You are in a shaded forest.",
        "exits": {"S": "beg10","W": "beg3","N": "beg1"},
        "interact": {},
        "enemies": [],
        "items": [sdag],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-*ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg3": {
        "description": "You are in a shaded forest.",
        "exits": {"W":"beg4","E": "beg2",},
        "interact": {},
        "enemies": [rat1],
        "items": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-*-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg4": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg5", "E": "beg3"},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-*-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg5": {
        "description": "You are in a shaded forest.",
        "exits": {"S": "beg6", "E": "beg4"},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff*-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg6": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg7","N": "beg5", "E": "beg8"},
        "items": [],
        "enemies": [rat2],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-*-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg7": {
        "description": "You are in a shaded forest.",
        "exits": {"S": "beg14", "E": "beg6"},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff*-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg8": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg6", "E": "beg9"},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-*-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg9": {
        "description": "You are in a shaded forest.",
        "exits": {"S": "beg11","W": "beg8", "E": "beg10"},
        "items": [],
        "enemies": [rat6],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-*-0ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg10": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg9","N": "beg2"},
        "items": [],
        "enemies": [rat5],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-*ff
``ffff|fffff|ffff
``ffff0-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg11": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg12","N": "beg9"},
        "items": {},
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-0-*ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg12": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg13","E": "beg11"},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-0-*-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg13": {
        "description": "You are in a shaded forest.",
        "exits": {"W": "beg14", "E": "beg12"},
        "items": [],
        "enemies": [],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff0-*-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
        "beg14": {
        "description": "You are in a shaded forest.",
        "exits": {"N": "beg7", "E": "beg13"},
        "items": [],
        "enemies": [rat3],
        "maps": """``````````fffffff
````````ffffff0ff
``````ffffffff|ff
`````fff0-0-0-0ff
````ffff|fffff|ff
```fff0-0-0-0-0ff
``ffff|fffff|ffff
``ffff*-0-0-0ffff
``fffffffffffffff

 * = You, f = Forest, ` = Water"""},
}

#Experience
def levelUp():
    global currentExp
    global maxHealth
    global playerLevel
    global levelNext
    global playerHealth
    global skillPoints
    print("Your experiences in this world make you stronger. You've gained an experience point")
    print("To level up, type Level class, where class is your class of choice. For a list of classes type 'Help Class.'")
    levelNext = levelNext**2
    maxHealth += 5
    playerHealth = maxHealth
    playerLevel += 1
    currentExp = 0
    skillPoints += 1


def attackStrike(target):
    for i in locations[loc]["enemies"]:
        if target in str(i.vname).lower():
            if not i.dead:
                global balance
                global currentExp
                print("You attack", i.vname)
                i.health -= wielded[0].damage
                if i.health <= 0:
                    i.dead = True
                    print("You've slain",i.vname,"!")
                    locations[loc]["enemies"].remove(i)
                    if i.loot != []:
                        for j in i.loot:
                            print(i.vname,"drops",j.vname)
                            locations[loc]["items"].append(j)
                    currentExp += i.xp
                time.sleep(balance-wielded[0].speed)


def attackFireball(target):
    for i in locations[loc]["enemies"]:
        if target in str(i.vname).lower():
            if not i.dead:
                global balance
                global currentExp
                print("You cast a fireball at", i.vname)
                i.health -= 8
                if i.health <=0:
                    i.dead = True
                    print("You burn",i.vname,"to a crisp.")
                    locations[loc]["enemies"].remove(i)
                    if i.loot != []:
                        for j in i.loot:
                            print(i.vname,"drops",j.vname)
                            locations[loc]["items"].append(j)
                    currentExp += i.xp
                time.sleep(balance)





def attackSkewer(target):

    def subWait(): #Needed, if we don't have a sub function with the time.sleep() function inside, it will loop continuosly, not giving the user a prompt.
        global currentExp
        while not i.dead:

            print(i.vname,"bleeds profusely.")
            time.sleep(5)
            i.health -= 5
            if i.health <= 0:
                i.dead = True
                print(i.vname,"bleeds to death from their wounds.")
                locations[loc]["enemies"].remove(i)
                if i.loot != []:
                    for j in i.loot:
                        print(i.vname,"drops",j.vname)
                        locations[loc]["items"].append(j)
                    currentExp += i.xp

    x = threading.Thread(target=subWait)

    for i in locations[loc]["enemies"]:
        if target in str(i.vname).lower():
            if wielded != []:
                if not i.dead:
                    global balance
                    global currentExp
                    print("You shove your",wielded[0].vname,"deep into the gut of",i.vname)
                    #print(i.vname,"begins to bleed from his wounds.")
                    i.loot.append(wielded[0])
                    wielded.remove(wielded[0])
                    try:
                        x.start()
                    except RuntimeError:
                        x = threading.Thread(target=subWait)
                        x.start()
            else:
                print("You need to wield a weapon first.")




def npcattack():
    global playerHealth
    for npc in locations[loc]["enemies"]:
        while npc.hostile and not npc.dead:
            print(npc.vname,"attacks!")
            playerHealth -= i.damage
            time.sleep(npc.speed)

def rest():
    global playerHealth
    global maxHealth
    global incap
    incap = True
    print("You sit down to rest.")
    while playerHealth < maxHealth:
        playerHealth += 5
        if playerHealth > maxHealth:
            playerHealth = maxHealth
        print(playerHealth)
        time.sleep(3)
    print("You've fully recovered.")
    incap = False


s = threading.Thread(target=attackSkewer)
f = threading.Thread(target=attackFireball)
p = threading.Thread(target=attackStrike)
n = threading.Thread(target=npcattack)
r = threading.Thread(target=rest)


scribed = False #Variable to show whether or not we've printed info about the location. (Otherwise info would be printed after every action)

print("Type 'help' to view commands.")
while True:
    while playerHealth > 0:
        if not playerLevel == 0: #Experience
            if currentExp >= levelNext: #Experience check
                levelUp() #Experience
        availableExits = ", ".join(locations[loc]["exits"].keys())
        availableItems = []
        for i in locations[loc]["items"]:
            availableItems.append(i.vname)
        enemiesHere = locations[loc]["enemies"]

        if not scribed: #If we haven't printed the description/items/enemies:

            print(locations[loc]["description"])
            print("Available exits are " + availableExits + " \n".upper())
            if enemiesHere != []:
                if len(enemiesHere)>1:
                    print("There are",len(enemiesHere),"enemies here:",', '.join(enemy.description for enemy in locations[loc]["enemies"]))
                if len(enemiesHere)==1:
                    print("There is an enemy here:",''.join(enemy.description for enemy in locations[loc]["enemies"]))
            if availableItems != []:
                print("The items here are :",str(availableItems))
            scribed = True

    #If enemies in location are hostile, thread and run the npcattack function
        for i in locations[loc]["enemies"]:
            if i.hostile and not n.is_alive():
                try:
                    n.start()
                except RuntimeError: #occurs if thread is dead
                    n = threading.Thread(target=npcattack) #create new instance if thread is dead
                    n.start() #start thread
    #Our input
        com = input(str(playerHealth)+">\n")
    #Map
        if com == "map":
            print(locations[loc]["maps"])
    #Strike
        if not incap:
            if 'strike' in com:
                try:
                    if not incap:
                        target = str(com.split(' ')[1]).lower()
                        if wielded != []:
                            for i in locations[loc]["enemies"]:
                                if str(target).lower() in str(i.vname).lower():
                                    i.hostile = True
                                    if i.hostile and not n.is_alive():

                                        try:
                                            n.start()
                                        except RuntimeError: #occurs if thread is dead
                                            n = threading.Thread(target=npcattack) #create new instance if thread is dead
                                            n.start() #start thread
                            if not p.is_alive():
                                try:
                                    p = threading.Thread(target=attackStrike(target))
                                    p.start()
                                except RuntimeError: #occurs if thread is dead
                                    p = threading.Thread(target=attackStrike(target)) #create new instance if thread is dead
                                    p.start()
                        else:
                            print("You're not wielding a weapon!")
                except:
                    print("Strike what?")

     #Movement
            if com.upper() in locations[loc]["exits"]:
                loc = locations[loc]["exits"][com.upper()]
                scribed = False
        else:
            print("You can't do that right now.")

    #Look
        if "look" in com:
            print(locations[loc]["description"])
            print("Available exits are " + availableExits + " \n".upper())
            if enemiesHere != []:
                print("There are enemies here:",', '.join(rat.vname for rat in locations[loc]["enemies"]))
            if availableItems != []:
                print("The items here are :",str(availableItems))
    #Get
        if "get" in com:
            try:
                target = str(com.split(' ')[1]).lower()
                for i in locations[loc]["items"]:
                    if target in i.vname.lower():
                        locations[loc]["items"].remove(i)
                        inv.append(i)
                        print("You pick up " + str(i.vname))
            except:
                print("Get what?")
    #Wield
        if str(com.split(' ')[0]).lower() == "wield":
            target = str(com.split(' ')[1]).lower()
            for i in inv:
                if target in str(i.vname.lower()):
                    wielded.append(i)
                    print("You wield ",i.vname," in your right hand.")
                    inv.remove(i)

    #Remove, Unwield
        if str(com.split(' ')[0]).lower() == "unwield":
            if wielded != []:
                for i in wielded:
                    wielded.remove(i)
                    inv.append(i)
                    print("You put",i.vname,"back into your pack.")
    #Inventory
        if com == "inv":
            if wielded == []:
                print("""You aren't wielding any weapons.""")
            if wielded != [] :
                print("You're currently wielding: ",', '.join(i.vname for i in wielded))
            print("You have " ,', '.join(i.vname for i in inv)," in your inventory.")
    #Rest
        if com.lower() == "rest":
            r = threading.Thread(target=rest)
            r.start()
        if "inspect" in com.lower():
            item = str(com.split(' ')[1]).lower()
            for i in inv:
                if item in i.vname.lower():
                    print(i.vname+':','\nDamage:',i.damage,"\nSpeed:",i.speed,"\nRarity:",i.rarity,"\nWeight:",i.weight)
#Debugging
        if "exper" in com.lower():
            print("exp",currentExp,"level", playerLevel)
            print("needed:",currentExp*playerLevel*.85 ,">", currentExp)
#Knight skills
        if knight >= 1:
#Skewer
            if str(com.split(' ')[0]).lower() == "skewer":
                if not incap:
                    try:
                        target = str(com.split(' ')[1]).lower()
                        for i in locations[loc]["enemies"]:
                            if str(target).lower() in str(i.vname).lower():
                                i.hostile = True
                                if i.hostile and not n.is_alive():
                                    try:
                                        n.start()
                                    except RuntimeError: #occurs if thread is dead
                                        n = threading.Thread(target=npcattack) #create new instance if thread is dead
                                        n.start() #start thread
                                    if not s.is_alive():
                                        try:
                                            s = threading.Thread(target=attackSkewer(target))
                                            s.start()
                                        except RuntimeError: #occurs if thread is dead
                                            s = threading.Thread(target=attackSkewer(target)) #create new instance if thread is dead
                                            s.start()

                    except:
                        print("Skewer what?")











#Mage skills
        if mage >=1:

            if str(com.split(' ')[0]).lower() == "cast":
                try:
                    if str(com.split(' ')[1]).lower() == 'fireball':
                        try:
                            if not incap:
                                target = str(com.split(' ')[2]).lower()
                                for i in locations[loc]["enemies"]:
                                    if str(target).lower() in str(i.vname).lower():
                                        i.hostile = True
                                        if i.hostile and not n.is_alive():
                                            try:
                                                n.start()
                                            except RuntimeError: #occurs if thread is dead
                                                n = threading.Thread(target=npcattack) #create new instance if thread is dead
                                                n.start() #start thread
                                    if not f.is_alive():
                                        try:
                                            f = threading.Thread(target=attackFireball(target))
                                            f.start()
                                        except RuntimeError: #occurs if thread is dead
                                            f = threading.Thread(target=attackFireball(target)) #create new instance if thread is dead
                                            f.start()
                        except:
                            print("Cast the fireball at what?")
                except:
                    print("Cast what?")



        if "level" in com.lower():
            category = str(com.split(' ')[1]).lower()
            if "knight" in category:
                skillPoints -= 1
                knight += 1
                print("Your expertise with blades and shields grows.")
                if knight == 1:
                    print("You've learned a new ability: 'Skewer': \nSkewer $target")

            if "mage" in category:
                skillPoints -= 1
                mage += 1
                print("Your ability to harness the elements grows.")
                if mage ==1:
                    print("You've learned a new spell: 'Fireball': \nCast Fireball $target")



        if "help" in com.lower():
            try:
                more = str(com.split(' ')[1]).lower()
                if "map" in more:
                    print("Get a birds eye view of your world.")
                if "inv" in more:
                    print("Show your current inventory, and wielded weapons.")
                if "get" in more:
                    print("Syntax: 'get x', picks up an item and places it in your inventory.")
                if "strike" in more:
                    print("Syntax: 'strike x', uses wielded weapon to strike at an enemy.")
                if "wield" in more:
                    print("Moves a weapon from your pack to your hands, at the ready.")
                if "remove" in more:
                    print("Removes the weapon from your hands, and places it in your pack.")
                if "look" in more:
                    print("Examine your surroundings.")
                if "rest" in more:
                    print("Sit down, and rest to heal your wounds.")
                if "class" in more:
                    print("The two supported classes are: Knight and Mage.")
            except:
                print("The currently supported commands are: map, inv, get, strike, wield, remove, look, and rest.")
    print("You died.")
    raise SystemExit
